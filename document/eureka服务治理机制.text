服务提供者
 服务注册：
 服务提供者 注册会通过Rest请求的方式将自己注册到EurekaServer上，同时带有自身服务的一些原信息。
 eureka.cli ent.register-with-eureka=true
 参数是否正确， 该值默认为true。 若设置为false将不会 启动注册操作。
 将原信息存在一个双层MAP的结构中。其中第一层key是服务名，第二层key是具体服务的实例名称。
 例如第一层服务名:USER-SERVICE 第二层服务名PC-20180109BHED:user-service:8011。
 在ribbon的负载均衡的例子中一个服务 有多个实例的情况
 第一层key: USER-SERVICE
 第二层key: PC-20180109BHED:user-service:8011，PC-20180109BHED:user-service:8012

 服务同步:
 例如：三个服务提供者分别注册到三个不同的服务注册中心上,他们的信息会被三个EurekaServer所维护同步。
 这个时候由于三个EurekaServer A-B-C-A 像这样循环互相注册这样好像也可以A注册BC B注册AC C注册AB，当一个服务提供者 在其中一个EurekaServer注册
 的时候，他会将请求转发到集群中相关的注册中心上，所以这3个服务注册之后他们的信息被同步到每一台注册中心上
 任意一台服务注册中心，都可以获取当这3个服务的信息。

服务续约:
在注册完服务之后，服务提供者会维护一个心跳用来维持告诉eurekaServer 我还活着。防止EurekaServer的任务剔除
这种操作称为服务续约。
服务续约有2个总要的属性：
eureka.instance.lease-renewal-interval-in-seconds=30 用于定义服务续约任务的调用间隔时间.服务失效后从新调用的间隔时间 默认30秒
eureka.instance.lease-expiration-duration-in-seconds=90 用于服务心跳停止之后 服务失效的时间 默认为90秒

服务消费者
获取服务:
集群的时候到这里， 在服务注册中心已经注册了 一个服务， 并且该服务有两个实例。 当我们启动
服务消费者的时候， 它会发送一个REST请求给服务注册中心，来获取上面注册的服务清
单 。 为了性能考虑， Eureka Server会维护一份只读的服务清单来返回给客户端，同时该缓
存清单会每隔30秒更新 一次。
获取服务是服务消费者的基础，所以必须确保eureka.client.fetch-registry=
true参数没有被修改成false, 该值默认为true。若希望修改缓存清单的 更新时间，可
以通过 eureka.client.registry-fetch-interval-seconds= 30参数进行修改，
该参数默认值为30, 单位为秒。
//TODO 还没写完
服务调用:
服务消费者在 获取服务清单后，通过服务名可以获得具体提供服务的实例名和该实例
的元数据信息。 因为有这些服务实例的详细信息， 所以客户端可以根据自己的需要决定具
体调用哪个实例，在rbbon中会默认采用轮询的方式进行调用，从而实现客户端的负载均
衡。

服务下线:
在系统运行过程中必然会面临关闭或重启服务的某个实例的情况， 在服务关闭期间，
我们自然不希望客户端会继续调用关闭了的实例。 所以在客户端程序中， 当服务实例进行
正常的关闭操作时， 它会触发一个服务下线的REST请求给Eurke a Server, 告诉服务注册
中心：“我要下线了”
。 服务端在接收到请求之后， 将该服务状态置为下线(DOWN), 并把
该下线事件传播出去。

失效剔除:
有些时候， 我们的服务实例并不一定会正常下线， 可能由于内存溢出、 网络故障等原
因使得服务不能正常工作， 而服务注册中心并未收到 “服务下线” 的请求。 为了从服务列
表中将这些无法提供服务的实例剔除， Eureka Server在启动的时候会创建一个定时任务，
默认每隔一段时间（默认为60秒） 将当前清单中超时（默认为90秒）没有续约的服务剔
除出去。 就是服务续约那块的2个参数

自我保护:
当我们在本地调试基于Eureka的程序时， 基本上都会碰到这样一个问题， 在服务注册
中心的信息面板中出现类似下面的红色警告信息：
EMERGENCY! EUREKA MAY BE INCORRECTLY CLAIMING INSTANCES ARE UP WHEN THEY'RE NOT.
RENEWALS ARE LESSER THAN THRESHOLD AND HENCE THE INSTANCES ARE NOT BEING EXPIRED JUST
TO BE SAFE.
实际上， 该警告就是触发了EurekaServer的自我保护机制。 之前我们介绍过， 服务注
册到EurekaServer之后，会维护一个心跳连接，告诉EurekaServer自己还活着。EurekaServer
在运行期间，会统计心跳失败的比例在15分钟之内是否低于85%, 如果出现低于的情况（在
单机调试的时候很容易满足， 实际在生产环境上通常是由于网络不稳定导致）， Eureka
Server会将当前的实例注册信息保护起来， 让这些实例不会过期， 尽可能保护这些注册信
息。 但是， 在这段保护期间内实例若出现问题， 那么客户端很容易拿到实际已经不存在的
服务实例， 会出现调用失败的清况， 所以客户端必须要有容错机制， 比如可以使用请求重
试、 断路器等机制。
由于本地调试很容易触发注册中心的保护机制， 这会使得注册中心维护的服务实例不
那么准确。 所以， 我们在本地进行开发的时候， 可以使用eureka.server.enable-self-preservation
= false参数来关闭保护机制， 以确保注册中心可以将不可用的实
例正确剔除。


